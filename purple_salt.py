# -*- coding: utf-8 -*-
"""Purple Salt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q06_SO_KbKKh6MU5ItnaPfUW5GiL91CC
"""

import hashlib
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import base64
import time
from IPython.display import HTML, display

# this makes passwords safe with salt
def password_thing(password):
    # Generate a random salt
    salt = os.urandom(16)

    # Combine salt with password before hashing
    salted_password = salt + password.encode('utf-8')

    # Create the hash using SHA-256
    hasher = hashlib.sha256()
    hasher.update(salted_password)
    result = hasher.digest()  # Binary digest

    # Return salt + hash together
    return salt + result

# verify a password
def verify_password(password, stored_salt_hash):
    # Extract the salt (first 16 bytes)
    salt = stored_salt_hash[:16]

    # Extract the stored hash
    stored_hash = stored_salt_hash[16:48]

    # Hash the password with the same salt
    hasher = hashlib.sha256()
    hasher.update(salt + password.encode('utf-8'))
    test_hash = hasher.digest()

    # Compare hashes
    return test_hash == stored_hash

# save to txt file
def save_password(salt_hash):
    # Convert binary data to base64 for safe storage
    encoded = base64.b64encode(salt_hash).decode('utf-8')
    file = open("hashed_passwords.txt", "a")
    file.write(encoded)
    file.write("\n")
    file.close()

# making the message secret
def make_secret(my_message, my_key):
    # random numbers for security
    random_part = os.urandom(16)

    # make the key work with AES
    good_key = hashlib.sha256(my_key.encode()).digest()

    # do the encryption
    cipher = Cipher(algorithms.AES(good_key), modes.CBC(random_part), backend=default_backend())
    encryptor = cipher.encryptor()

    # fix message size
    message_fixed = fix_size(my_message.encode())

    # encrypt it now!!
    secret_message = encryptor.update(message_fixed) + encryptor.finalize()

    # put them together
    return random_part + secret_message

# making the message normal again
def unsecret(secret_stuff, my_key):
    # get the random part back
    random_part = secret_stuff[0:16]
    just_message = secret_stuff[16:]

    # make the key work again
    good_key = hashlib.sha256(my_key.encode()).digest()

    # do the decryption!!
    cipher = Cipher(algorithms.AES(good_key), modes.CBC(random_part), backend=default_backend())
    decryptor = cipher.decryptor()

    # get the message back
    almost_message = decryptor.update(just_message) + decryptor.finalize()

    # fix the size back
    normal_message = unfix_size(almost_message)

    # make it readable
    return normal_message.decode('utf-8')

# make message the right size
def fix_size(message):
    blocksize = 16
    missing = blocksize - (len(message) % blocksize)
    padding = bytes([missing]) * missing
    return message + padding

# fix the size back
def unfix_size(padded_message):
    padding_size = padded_message[-1]
    return padded_message[:-padding_size]

# save the secret message
def save_secret(secret):
    file = open("encrypted_message.bin", "wb")
    file.write(secret)
    file.close()

# get the secret message back
def get_secret():
    file = open("encrypted_message.bin", "rb")
    secret = file.read()
    file.close()
    return secret

# crack the password
def decode_hash(salt_hash):
    print("\n----- TRYING TO CRACK THE PASSWORD HASH -----")
    print("Starting password cracker...")

    # Extract the salt
    salt = salt_hash[:16]
    stored_hash = salt_hash[16:48]

    # list of common passwords to try
    common_passwords = [
        "password", "123456", "qwerty", "admin", "welcome",
        "password123", "abc123", "letmein", "monkey", "1234567890",
        "trustno1", "dragon", "baseball", "football", "superman",
        "batman", "secret", "123123", "555555", "lovely",
        "hello", "charlie", "888888", "master", "sunshine"
    ]

    print(f"I will try {len(common_passwords)} common passwords...")

    # try each password
    found = False
    for pwd in common_passwords:
        # hash this password with the same salt
        hasher = hashlib.sha256()
        hasher.update(salt + pwd.encode('utf-8'))
        test_hash = hasher.digest()

        # show progress animation
        print(".", end="", flush=True)
        time.sleep(0.1)  # pause for effect!!

        # check if match
        if test_hash == stored_hash:
            print("\nPASSWORD FOUND!!! Change your password asap!ðŸ”“")
            print(f"The password was: {pwd}")
            found = True
            break

    # if no password found
    if not found:
        print("\nCouldn't crack the password ðŸ˜¢")
        print("It must be a strong password! Good job!!")

    return found

# ===== THE MAIN PROGRAM =====
def start_program():
    print("*** PASSWORD & ENCRYPTION PROGRAM ***")
    print("-----------------------------------------------")

    # PART 1 - PASSWORD STUFF
    password = input("Type in your password: ")
    safe_password = password_thing(password)
    save_password(safe_password)
    print("Password saved")
    print("Your super secure password hash is: " + base64.b64encode(safe_password).decode('utf-8')[:20] + "...")

    # PART 1.5 - TRY TO CRACK THE PASSWORD!!
    crack_yn = input("\nShould I try to crack the password? (y/n): ")
    if crack_yn.lower() == 'y':
        decode_hash(safe_password)

    # PART 2 - SECRET MESSAGE STUFF
    print("\n----- NOW LET'S ENCRYPT A MESSAGE -----")
    message = input("Type your secret message here: ")
    secret_key = input("Make up a secret key: ")

    # make it secret
    secret_message = make_secret(message, secret_key)
    save_secret(secret_message)

    # show the secret version
    coded_message = base64.b64encode(secret_message).decode('utf-8')
    print("\nYour secret coded message is: " + coded_message[:30] + "...")

    # now decode it again!!
    print("\n----- DECODE IT AGAIN -----")
    secret_stuff = get_secret()
    normal_message = unsecret(secret_stuff, secret_key)

    # show the normal message
    print("Your message says: " + normal_message)

    # Display the final message in purple using HTML in Colab
    display(HTML("<p style='color:purple; font-size:16px;'><b>Cryptology Magic!</b></p>"))

# run my program!!
if __name__ == "__main__":
    start_program()